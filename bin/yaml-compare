#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"
require "stringio"
require "yaml"

def compare(hash1, hash2, current: "")
  if hash1.is_a?(Array)
    hash1.each.with_index { |_, i| compare(hash1[i], hash2[i], current:) }
  elsif hash1.is_a?(String) || hash2.is_a?(String)
    if !hash1.is_a?(String)
      puts "key \"#{current}\" is a string in #{ARGV[1]}"
    elsif !hash2.is_a?(String)
      puts "key \"#{current}\" is a string in #{ARGV[0]}"
    end
  else
    (hash1.keys + hash2.keys).uniq.each do |key|
      full_key = [current, key].reject(&:empty?).join(".")
      if !hash1.key?(key)
        puts "missing key \"#{full_key}\" from #{ARGV[0]}"
      elsif !hash2.key?(key)
        puts "missing key \"#{full_key}\" from #{ARGV[1]}"
      else
        compare(hash1[key], hash2[key], current: full_key)
      end
    end
  end
end

def with_captured_stdout
  original_stdout = $stdout
  $stdout = StringIO.new
  yield
  $stdout.string
ensure
  $stdout = original_stdout
end

parsed = Dorian::Arguments.parse(version: { alias: :v }, help: { alias: :h })

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../VERSION", __dir__))
end

file1, file2 = parsed.files.map { |file| YAML.safe_load(File.read(file)) }
root1, root2 = parsed.arguments
file1 = file1[root1] if root1
file2 = file2[root2] if root2

output = with_captured_stdout { compare(file1, file2) }

abort output unless output.empty?
